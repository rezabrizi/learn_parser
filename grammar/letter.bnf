// ---------------------------------
// Lexical grammar
%lex

%%

\/\/.*     /* Skip comments */

\/\*(.|\s)*\*\/ /* Skip comments */

\s+ /* skip whitespaces */


// ---------------------------------
// Keywords
\bdef\b     return 'DEF'
\breturn\b  return 'RETURN'
\bif\b      return 'IF'
\belse\b    return 'ELSE'

\btrue\b    return 'TRUE'
\bfalse\b   return 'FALSE'
\bnull\b    return 'NULL'

\d+         return 'NUMBER'
\w+         return 'IDENTIFIER'

[\=!]\=     return 'EQUALITY_OPERATOR'
[><]\=?     return 'RELATIONAL_OPERATOR'

[+\-]       return 'ADDITIVE_OPERATOR'
[*/]        return 'MULTIPLICATIVE_OPERATOR'


/lex

// ---------------------------------
// Module Include 

%{

    // Code included "as is"

    function BinaryExpression1(left, op, right) {
        return [op, left, right];
    }
    
    function BinaryExpression(left, operator, right) {
        return {
        type: 'BinaryExpression',
        operator,
        left,
        right,
        };
    }

    function Literal(namePrefix, value){
        return {
            type: `${namePrefix}Literal`,
            value,
        };
    }

    function IfStatement(test, consequent, alternate){
        return {
            type: 'IfStatement',
            test,
            consequent,
            alternate,
        }
    }


%}

/**
* The `THEN` precedence is lower, than of 'ELSE', so
* no shoft-reduce conflict, and no dangling else problem
*/ 
%nonassoc THEN
%nonassoc ELSE
 
// ---------------------------------
// Syntactic grammar


%%

Program
    : StatementList
    {
        $$ = {
            type: 'Program',
            body: $1,
        }
    }
    ;

StatementList
    : Statement { $$ = [$1] }
    | StatementList Statement {$1.push($2); $$ = $1}
    ;

Statement
    : ExpressionStatement
    | EmptyStatement
    | BlockStatement
    | FunctionDeclaration
    | ReturnStatement
    | IfStatement
    ;

IfStatement
    : IF '(' Expression ')' Statement %prec THEN 
    { $$ = IfStatement($3, $5) }
    | IF '(' Expression ')' Statement ELSE Statement { $$ = IfStatement($3, $5, $7) }
    ;

FunctionDeclaration
    : DEF Identifier '(' OptFormalParameterList ')' BlockStatement
    {
        $$ = {
            type: 'FunctionDeclaration',
            name: $2,
            params: $4,
            body: $6,
        }
    }
    ;

Identifier
    : IDENTIFIER
    {
        $$ = {
            type: 'Identifier', 
            value: $1,
        }
    }
    ;

OptFormalParameterList 
    : FormalParameterList
    | /* empty */
        {$$ = []}
    ; 

FormalParameterList
    : Identifier { $$ = [$1]}
    | FormalParameterList ',' Identifier 
    { $1.push($3); $$ = $1}
    ;

EmptyStatement
    : ';'
    {
        $$ = { type : 'EmptyStatement',}
    }
    ;

BlockStatement
    : '{' OptStatementList '}'
    {
        $$ = {
            type: 'BlockStatement',
            body: $2,
        }
    }
    ;

OptStatementList
    : StatementList
    | /* empty */ { $$ = [] }
    ;

ReturnStatement
    : RETURN OptExpression ';'
    {
        $$ = {
            type: 'ReturnStatement',
            argument: $2,
        }
    }
    ;
OptExpression
    : Expression
    | /* empty */ {$$= null}
    ;
 
ExpressionStatement
    : Expression ';'
    { $$ = {
        type: 'ExpressionStatement',
        expression: $1,
    }}
    ;

Expression
    : EqualityExpression
    ;

EqualityExpression
    : RelationalExpression
    | EqualityExpression EQUALITY_OPERATOR RelationalExpression
        { $$ = BinaryExpression($1, $2, $3) }
    ;

RelationalExpression
    : AdditiveExpression
    | RelationalExpression RELATIONAL_OPERATOR AdditiveExpression
        { $$ = BinaryExpression($1, $2, $3) }
    ;


AdditiveExpression
    : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression 
    { $$ = BinaryExpression($1, $2, $3)}
    | MultiplicativeExpression
    ;

MultiplicativeExpression 
    : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression
    { $$ = BinaryExpression($1, $2, $3)}
    | PrimaryExpression
    ;

PrimaryExpression
    : Literal
    | Identifier
    | ParenthesizedExpression
    ;

Literal 
    : NumericLiteral
    | TrueLiteral
    | FalseLiteral
    | NullLiteral
    ;

TrueLiteral
    : TRUE {$$ = Literal('Boolean', true) }
    ;

FalseLiteral
    : FALSE {$$ = Literal('Boolean', false) }
    ;

NullLiteral
    : NULL {$$ = Literal('Null', null) }
    ;

NumericLiteral
    : NUMBER { $$ = Literal('Numeric', Number($1)) }
    ;

ParenthesizedExpression
    : '(' Expression ')' { $$ = $2; }
    ;